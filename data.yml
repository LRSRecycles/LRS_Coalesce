defaultStorageMapping: FINANCIAL_DATA_MODEL
installedPackages: {}
jobs:
  Job-1:
    excludeSelector: ""
    id: 1
    includeSelector: "{ location: SAGE_COMBINED name: AMBPVDP_COMBINED } OR { location: SAGE_COMBINED name: APIBC_COMBINED } OR { location: SAGE_COMBINED name: APIBD_COMBINED } OR { location: SAGE_COMBINED name: APIBH_COMBINED } OR { location: SAGE_COMBINED name: APOBL_COMBINED } OR { location: SAGE_COMBINED name: APOBP_COMBINED } OR { location: SAGE_COMBINED name: APPJD_COMBINED } OR { location: SAGE_COMBINED name: APPJH_COMBINED } OR { location: SAGE_COMBINED name: APPJS_COMBINED } OR { location: SAGE_COMBINED name: APVEN_COMBINED } OR { location: SAGE_COMBINED name: APVGR_COMBINED } OR { location: SAGE_COMBINED name: APVSM_COMBINED } OR { location: TRUXCOMBINED_RAW name: CD05_COMBINED } OR { location: TRUXCOMBINED_RAW name: CD11_COMBINED } OR { location: TRUXCOMBINED_RAW name: CD14_COMBINED } OR { location: TRUXCOMBINED_RAW name: CI01_COMBINED } OR { location: TRUXCOMBINED_RAW name: CM03_Combined } OR { location: TRUXCOMBINED_RAW name: CM04_Combined } OR { location: TRUXCOMBINED_RAW name: CM05_Combined } OR { location: TRUXCOMBINED_RAW name: CM24_COMBINED } OR { location: SAGE_COMBINED name: CSCOM_COMBINED } OR { location: TRUXCOMBINED_RAW name: DM01P_COMBINED } OR { location: TRUXCOMBINED_RAW name: DM01_CDC_COMBINED } OR { location: TRUXCOMBINED_RAW name: DM01_COMBINED } OR { location: TRUXCOMBINED_RAW name: DM05Z_COMBINED } OR { location: TRUXCOMBINED_RAW name: FC01_Combined } OR { location: SAGE_COMBINED name: GLABK_COMBINED } OR { location: SAGE_COMBINED name: GLABRX_COMBINED } OR { location: SAGE_COMBINED name: GLACGRP_COMBINED } OR { location: SAGE_COMBINED name: GLAMF_COMBINED } OR { location: SAGE_COMBINED name: GLASV_COMBINED } OR { location: SAGE_COMBINED name: GLBCTL_COMBINED } OR { location: SAGE_COMBINED name: GLJED_COMBINED } OR { location: SAGE_COMBINED name: GLJEH_COMBINED } OR { location: SAGE_COMBINED name: GLPOST_COMBINED } OR { location: SAGE_COMBINED name: GLRVAL_COMBINED } OR { location: TRUXCOMBINED_RAW name: LM01_COMBINED } OR { location: TRUXCOMBINED_RAW name: LM03_COMBINED } OR { location: TRUXCOMBINED_RAW name: MT00_COMBINED } OR { location: TRUXCOMBINED_RAW name: PC01_COMBINED } OR { location: TRUXCOMBINED_RAW name: PC02_COMBINED } OR { location: TRUXCOMBINED_RAW name: PC03_COMBINED } OR { location: TRUXCOMBINED_RAW name: PC04_COMBINED } OR { location: TRUXCOMBINED_RAW name: RM01_Combined } OR { location: TRUXCOMBINED_RAW name: RM02_COMBINEd } OR { location: TRUXCOMBINED_RAW name: RM04_COMBINED } OR { location: TRUXCOMBINED_RAW name: RM17_COMBINED } OR { location: TRUXCOMBINED_RAW name: SM01_COMBINED } OR { location: TRUXCOMBINED_RAW name: TR01_COMBINED }"
    name: Combined Job
    steps: []
    subgraphs: []
locations:
  FINANCIAL_DATA_MODEL:
    mappingDefinitions:
      "2":
        database: LRS_PRODUCTION
        schema: FINANCIAL_DATA_MODEL
  MASTER_DATA:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: MASTER_DATA
  MASTER_DATA_CLEAN:
    mappingDefinitions:
      "2":
        database: LRS_PRODUCTION
        schema: MASTER_DATA_CLEAN
  SAGE_CDC_BLDDAT:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: SG_CDC_BLDDAT
  SAGE_CDC_ECODAT:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: SG_CDC_ECODAT
  SAGE_CDC_HRTDAT:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: SG_CDC_HRTDAT
  SAGE_CDC_LAKDAT:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: SG_CDC_LAKDAT
  SAGE_CDC_LAKPDA:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: SG_CDC_LAKPDA
  SAGE_CDC_LAKSDA:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: SG_CDC_LAKSDA
  SAGE_CDC_LIADAT:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: SG_CDC_LIADAT
  SAGE_CDC_LINDAT:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: SG_CDC_LINDAT
  SAGE_CDC_LRSDCT:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: SG_CDC_LRSDCT
  SAGE_CDC_MANDAT:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: SG_CDC_MANDAT
  SAGE_CDC_RAMDAT:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: SG_CDC_RAMDAT
  SAGE_COMBINED:
    mappingDefinitions:
      "2":
        database: LRS_PRODUCTION
        schema: SAGE_COMBINED_RAW
  SG_BLDDAT:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: SG_BLDDAT_DBO
  SG_ECODAT:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: SG_ECODAT_DBO
  SG_HRTDAT:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: SG_HRTDAT_DBO
  SG_LAKDAT:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: SG_LAKDAT_DBO
  SG_LAKPDA:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: SG_LAKPDA_DBO
  SG_LAKSDA:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: SG_LAKSDA_DBO
  SG_LIADAT:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: SG_LIADAT_DBO
  SG_LINDAT:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: SG_LINDAT_DBO
  SG_LRSDCT:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: SG_LRSDCT_DBO
  SG_MANDAT:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: SG_MANDAT_DBO
  SG_RAMDAT:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: SG_RAMDAT_DBO
  TOWER_COMBINED:
    mappingDefinitions:
      "2":
        database: LRS_PRODUCTION
        schema: TOWER_COMBINED_RAW
  TOWER_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TOWER_RAW
  TRUXCOMBINED_RAW:
    mappingDefinitions:
      "2":
        database: LRS_PRODUCTION
        schema: TRUX_COMBINED_RAW
  TRUX_AL_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_AL_DBO
  TRUX_AM_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_AM_DBO
  TRUX_AS_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_AS_DBO
  TRUX_AT_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_AT_DBO
  TRUX_BC_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_BC_DBO
  TRUX_BH_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_BH_DBO
  TRUX_CD_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_CD_DBO
  TRUX_DC_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_DC_DBO
  TRUX_DF_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_DF_DBO
  TRUX_ES_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_ES_DBO
  TRUX_HA_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_HA_DBO
  TRUX_HR_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_HR_DBO
  TRUX_IC_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_IC_DBO
  TRUX_IP_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_IP_DBO
  TRUX_LR_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_LR_DBO
  TRUX_MD_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_MD_DBO
  TRUX_ME_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_ME_DBO
  TRUX_MF_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_MF_DBO
  TRUX_MH_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_MH_DBO
  TRUX_MM_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_MM_DBO
  TRUX_MN_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_MN_DBO
  TRUX_MO_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_MO_DBO
  TRUX_MP_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_MP_DBO
  TRUX_MW_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_MW_DBO
  TRUX_NI_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_NI_DBO
  TRUX_PS_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_PS_DBO
  TRUX_RT_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_RT_DBO
  TRUX_SH_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_SH_DBO
  TRUX_SW_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_SW_DBO
  TRUX_TP_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_TP_DBO
  TRUX_UA_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_UA_DBO
  TRUX_UB_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_UB_DBO
  TRUX_UC_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_UC_DBO
  TRUX_V9_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_V9_DBO
  TRUX_VA_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_VA_DBO
  TRUX_VB_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_VB_DBO
  TRUX_VC_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_VC_DBO
  TRUX_VE_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_VE_DBO
  TRUX_VI_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_VI_DBO
  TRUX_WA_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_WA_DBO
  TRUX_XI_COMP_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: TRX_XI_DBO
  TRX_CDC_AL:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_AL
  TRX_CDC_AM:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_AM
  TRX_CDC_AS:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_AS
  TRX_CDC_AT:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_AT
  TRX_CDC_BC:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_BC
  TRX_CDC_BH:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_BH
  TRX_CDC_CD:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_CD
  TRX_CDC_DC:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_DC
  TRX_CDC_DF:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_DF
  TRX_CDC_ES:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_ES
  TRX_CDC_HA:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_HA
  TRX_CDC_HR:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_HR
  TRX_CDC_IC:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_IC
  TRX_CDC_IP:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_IP
  TRX_CDC_LR:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_LR
  TRX_CDC_MD:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_MD
  TRX_CDC_ME:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_ME
  TRX_CDC_MF:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_MF
  TRX_CDC_MH:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_MH
  TRX_CDC_MM:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_MM
  TRX_CDC_MN:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_MN
  TRX_CDC_MO:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_MO
  TRX_CDC_MP:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_MP
  TRX_CDC_MW:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_MW
  TRX_CDC_NI:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_NI
  TRX_CDC_PS:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_PS
  TRX_CDC_RT:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_RT
  TRX_CDC_SH:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_SH
  TRX_CDC_SW:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_SW
  TRX_CDC_TP:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_TP
  TRX_CDC_UA:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_UA
  TRX_CDC_UB:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_UB
  TRX_CDC_UC:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_UC
  TRX_CDC_V9:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_V9
  TRX_CDC_VA:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_VA
  TRX_CDC_VB:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_VB
  TRX_CDC_VC:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_VC
  TRX_CDC_VE:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_VE
  TRX_CDC_VI:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_VI
  TRX_CDC_WA:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_WA
  TRX_CDC_XI:
    mappingDefinitions:
      "2":
        database: LRS_CDC_PROD
        schema: TRX_CDC_XI
  VENA_RAW:
    mappingDefinitions:
      "2":
        database: LRS_RAW
        schema: VENA_RAW
macros: {}
packages: {}
projects: {}
stepTypes:
  StepType-4:
    id: "4"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: MS Loop
        short: MSLOOP
        plural: MS Loop
        tagColor: 'black'
        config:
        - groupName: Additional Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            isRequired: false
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - displayName: Insert Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            isRequired: true

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        - groupName: Storage Location Query
          items:
          - displayName: Starts With
            attributeName: storageLocationSearchText
            type: textBox
            default: 'SOURCE'
            isRequired: true
            
        systemColumns:
        - displayName: "SOURCE"
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemSource
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                {{ node.override.create.script }}
            {% elif node.materializationType == 'table' %}
                {{ stage('Create Stage Table') }}
                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}
                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: |
            {% if config.truncateBefore %}
                {{ stage('Truncate Stage Table') }}
                TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            {% endif %}
            {% for sourceMapping in storageLocations if sourceMapping.name.startswith(config.storageLocationSearchText) %}
                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ stage( config.insertStrategy + ' Sources' | string ) }}
                            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                        {% endif %}
                        {% for source in sources %}
                            {% if config.insertStrategy == 'INSERT' %}
                                {{ stage('Insert ' +  sourceMapping.name + '_' + source.name | string ) }}
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                            {% endif %}
                            SELECT
                            {% for col in source.columns %}
                                {% if col.isSystemSource %}
                                    '{{ sourceMapping.name }}'
                                {% else %}
                                    {{ sources[0].columns[0].sourceColumns[0].node.name + "." + col.name}}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                            FROM {{ ref(sourceMapping.name, sources[0].columns[0].sourceColumns[0].node.name )}}
                            {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                {{config.insertStrategy}}
                            {% endif %}
                        {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}
            {% endfor %}
    name: Multi Source Loop
    version: 1
  StepType-5:
    id: "5"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Node Profiler
        short: PROF
        tagColor: blue
        plural: Node Profilers



        config:
        - groupName: Sampling Options
          items:
          - displayName: Sample Mode
            attributeName: sampleMode
            type: dropdownSelector
            default: Sample
            options:
              - Sample
              - Full Table
           
            isRequired: false
          
          - displayName: Percent or Fixed Number of Rows
            attributeName: sampleOption
            type: dropdownSelector
            default: Fixed Row
            options:
              - Fixed Row
              - Percentage
            isRequired: false
            enableIf: "{% if config.sampleMode == 'Sample' %} true {% else %} false {% endif %}"


          - displayName: Number of Rows
            attributeName: sampleRows
            type: textBox
            default: '1000'
            isRequired: false
            enableIf: "{% if config.sampleMode == 'Sample' and config.sampleOption == 'Fixed Row' %} true {% else %} false {% endif %}"
          
          - displayName: Percentage
            attributeName: samplePercent
            type: textBox
            default: '10'
            isRequired: false
            enableIf: "{% if config.sampleMode == 'Sample' and config.sampleOption == 'Percentage' %} true {% else %} false {% endif %}"

        - groupName: Distinct and Null
          items:
          - displayName: Distict Count
            attributeName: isDistinctCount
            type: columnSelector
            isRequired: false
          
          - displayName: Null Count
            attributeName: isNullCount
            type: columnSelector
            isRequired: false

        - groupName: Min / Max / Avg
          items:
          - displayName: MAX Value
            attributeName: isMaxMetric
            type: columnSelector
            isRequired: false

          - displayName: MIN Value
            attributeName: isMinMetric
            type: columnSelector
            isRequired: false
          - displayName: Average Value
            attributeName: isAvgMetric
            type: columnSelector
            isRequired: false


        systemColumns:

        - displayName: PROFILE_METRIC
          transform: "NULL"
          dataType: VARCHAR
          placement: beginning
          attributeName: isSystemUpdateDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: beginning
          attributeName: isSystemCreateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Profile Node Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" VARCHAR 
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            {% endif %}
        run:
          templateString: |
            {% if columns | selectattr('isDistinctCount')| list | length > 0 %}
                {{ stage('Profile Distinct') }}
                
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                        SELECT
                        'DISTINCT' as "PROFILE_METRIC",
                        {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            {% if col.isDistinctCount %}
                                COUNT(DISTINCT "{{ col.name }}" )
                            {% else %}
                                {% if col.transform | trim != '' %}{{ col.transform }}{% else %}NULL{% endif %}
                            {% endif %}
                            AS "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}

                        {{ sources[0].join }} 
                        {% if config.sampleMode == 'Sample' %} 
                            sample (
                            {% if config.sampleOption == 'Percentage' %} 
                                {{ config.samplePercent }}
                            {% else %}
                                {{ config.sampleRows }} rows 
                            {% endif %}
                            )
                        {% endif %}
                        )
                        AS "SRC"
                    ON {% for col in sources[0].columns if col.isSystemUpdateDate or col.isSystemCreateDate -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                    WHEN MATCHED
                    THEN UPDATE SET
                    {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor %}
                    WHEN NOT MATCHED THEN
                    INSERT (
                    {%- for col in columns %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

            {% endif %}


            {% if columns | selectattr('isNullCount')| list | length > 0 %}
                {{ stage('Profile Null Values') }}
                
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                        SELECT
                        'Null Count' as "PROFILE_METRIC",
                        {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            {% if col.isNullCount %}
                                SUM(CASE WHEN "{{ col.name }}" is NULL THEN 1 ELSE 0 END     )
                            {% else %}
                                {% if col.transform | trim != '' %}{{ col.transform }}{% else %}NULL{% endif %}
                            {% endif %}
                            AS "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}

                        {{ sources[0].join }} 
                        {% if config.sampleMode == 'Sample' %} 
                            sample (
                            {% if config.sampleOption == 'Percentage' %} 
                                {{ config.samplePercent }}
                            {% else %}
                                {{ config.sampleRows }} rows 
                            {% endif %}
                            )
                        {% endif %}
                    ) AS "SRC"
                     ON {% for col in sources[0].columns if col.isSystemUpdateDate or col.isSystemCreateDate -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                    WHEN MATCHED
                    THEN UPDATE SET
                    {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor %}
                    WHEN NOT MATCHED THEN
                    INSERT (
                    {%- for col in columns %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

            {% endif %}


            {% if columns | selectattr('isMaxMetric')| list | length > 0 %}
                {{ stage('Profile Max') }}
                
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                        SELECT DISTINCT
                        'MAX' as "PROFILE_METRIC",
                        {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            {% if col.isMaxMetric %}
                               (SELECT MAX("{{col.name}}") 
                                {{ sources[0].join }} 
                                {% if config.sampleMode == 'Sample' %} 
                                    sample (
                                    {% if config.sampleOption == 'Percentage' %} 
                                        {{ config.samplePercent }}
                                    {% else %}
                                        {{ config.sampleRows }} rows 
                                    {% endif %}
                                    )
                                {% endif %} ) 
                            {% else %}
                                {% if col.transform | trim != '' %}{{ col.transform }}{% else %}NULL{% endif %}
                            {% endif %}
                            AS "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}

                        {{ sources[0].join }} 
                        {% if config.sampleMode == 'Sample' %} 
                            sample (
                            {% if config.sampleOption == 'Percentage' %} 
                                {{ config.samplePercent }}
                            {% else %}
                                {{ config.sampleRows }} rows 
                            {% endif %}
                            )
                        {% endif %} )
                        AS "SRC"
                    ON {% for col in sources[0].columns if col.isSystemUpdateDate or col.isSystemCreateDate -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                    WHEN MATCHED
                    THEN UPDATE SET
                    {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor %}
                    WHEN NOT MATCHED THEN
                    INSERT (
                    {%- for col in columns %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

            {% endif %}

            {% if columns | selectattr('isMinMetric')| list | length > 0 %}
                {{ stage('Profile Min') }}
                
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                        SELECT DISTINCT
                        'MIN' as "PROFILE_METRIC",
                        {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            {% if col.isMinMetric %}
                               (SELECT MIN("{{col.name}}") 
                               {{ sources[0].join }} 
                                {% if config.sampleMode == 'Sample' %} 
                                    sample (
                                    {% if config.sampleOption == 'Percentage' %} 
                                        {{ config.samplePercent }}
                                    {% else %}
                                        {{ config.sampleRows }} rows 
                                    {% endif %}
                                    )
                                {% endif %} ) 
                            {% else %}
                                {% if col.transform | trim != '' %}{{ col.transform }}{% else %}NULL{% endif %}
                            {% endif %}
                            AS "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}

                        {{ sources[0].join }} 
                        {% if config.sampleMode == 'Sample' %} 
                            sample (
                            {% if config.sampleOption == 'Percentage' %} 
                                {{ config.samplePercent }}
                            {% else %}
                                {{ config.sampleRows }} rows 
                            {% endif %}
                            )
                        {% endif %} )
                        AS "SRC"
                    ON {% for col in sources[0].columns if col.isSystemUpdateDate or col.isSystemCreateDate -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                    WHEN MATCHED
                    THEN UPDATE SET
                    {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor %}
                    WHEN NOT MATCHED THEN
                    INSERT (
                    {%- for col in columns %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

            {% endif %}

            {% if columns | selectattr('isAvgMetric')| list | length > 0 %}
                {{ stage('Profile Average') }}
                
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                        SELECT DISTINCT
                        'AVG' as "PROFILE_METRIC",
                        {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            {% if col.isAvgMetric %}
                               (SELECT AVG("{{col.name}}") 
                               {{ sources[0].join }} 
                                {% if config.sampleMode == 'Sample' %} 
                                    sample (
                                    {% if config.sampleOption == 'Percentage' %} 
                                        {{ config.samplePercent }}
                                    {% else %}
                                        {{ config.sampleRows }} rows 
                                    {% endif %}
                                    )
                                {% endif %} ) 
                            {% else %}
                                {% if col.transform | trim != '' %}{{ col.transform }}{% else %}NULL{% endif %}
                            {% endif %}
                            AS "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}

                        {{ sources[0].join }} 
                        {% if config.sampleMode == 'Sample' %} 
                            sample (
                            {% if config.sampleOption == 'Percentage' %} 
                                {{ config.samplePercent }}
                            {% else %}
                                {{ config.sampleRows }} rows 
                            {% endif %}
                            )
                        {% endif %} )
                        AS "SRC"
                     ON {% for col in sources[0].columns if col.isSystemUpdateDate or col.isSystemCreateDate -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                    WHEN MATCHED
                    THEN UPDATE SET
                    {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor %}
                    WHEN NOT MATCHED THEN
                    INSERT (
                    {%- for col in columns %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

            {% endif %}
    name: Node Profiler
    version: 1
  StepType-6:
    id: "6"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: CDC Table
        short: "CDC"
        tagColor: "#ff33cc"
        plural: CDC Tables

        config:
        - groupName: Stream
          items:
          - displayName: Description
            attributename: description
            type: textBox
            isRequired: false
            default: "A CDC table consists of a few components:\n
              1. A stream on the source node\n
              2. The CDC table which contains a persistent replica of recent CDC records\n
              3. A sequence to keep track of streams\n
              4. Optional: a Task to replicate records from the Stream into the CDC table\n
              "
              
        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: false

        systemColumns:
        - displayName: "METADATA$ACTION"
          transform: "METADATA$ACTION"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataAction
          description: Indicates the DML operation (INSERT, DELETE) recorded.
        - displayName: "METADATA$ISUPDATE"
          transform: "METADATA$ISUPDATE"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataIsUpdate
          description: Indicates whether the operation was part of an UPDATE statement.
        - displayName: "METADATA$ROW_ID"
          transform: "METADATA$ROW_ID"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataRowId
          description: Specifies the unique and immutable ID for the row, which can be used to track changes to specific rows over time.
        - displayName: "CDC_ID"
          transform: ""
          dataType: INTEGER
          placement: end
          attributeName: isStreamMetadataCDCId
          description: specific CDC identifier based on a sequence.
        - displayName: "CDC_TIMESTAMP"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate
          description: specific attribute containing the timestamp of storing the CDC record.
      templates:
        create:
          templateString: |-
            {{ stage('Create Stream') }}

            CREATE OR REPLACE STREAM {{ ref_no_link(node.location.name, "STR_" + node.name) }}
            ON TABLE {{ ref(sources[0].dependencies[0].node.location.name, sources[0].dependencies[0].node.name) }}
            APPEND_ONLY = FALSE
            SHOW_INITIAL_ROWS=TRUE
            COMMENT = 'CDC Stream on {{ ref(node.location.name, sources[0].dependencies[0].node.name) }}'

            {{ stage('Create Sequence') }}

            CREATE OR REPLACE SEQUENCE {{ ref_no_link(node.location.name, "SEQ_" + node.name) }}

            {{ stage('Create CDC Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            {% if config.taskEnabled is true %}

                {{ stage('Create Task') }}

                CREATE OR REPLACE TASK 
                {% if config.taskCustomName != '' %}
                    {{ ref_no_link(node.location.name, config.taskCustomName) }}
                {% else %}
                    {{ ref_no_link(node.location.name, "TSK_" + node.name) }}
                {% endif %}
                WAREHOUSE = {{config.taskWarehouse}}
             
                SCHEDULE = 
                {% if config.taskSchedule == 'Every minute' %}
                    '1 MINUTE'
                {% elif config.taskSchedule == 'Every 5 minutes' %}
                    '5 MINUTE'
                {% elif config.taskSchedule == 'Every 30 minutes' %}
                    '30 MINUTE'
                {% elif config.taskSchedule == 'Every hour' %}
                    '60 MINUTE'
                {% elif config.taskSchedule == 'Every day' %}
                    '3600 MINUTE'
                {% else %}
                    'INVALID'
                {% endif %}
                COMMENT='Task to copy data of stream STR_{{node.name}} to CDC Table {{node.name}}'
                WHEN SYSTEM$STREAM_HAS_DATA('{{ ref_no_link(node.location.name, "STR_" + node.name) }}')
                AS
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}

                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {% if col.name == 'CDC_ID' %}
                            SEQ_{{node.name}}.NEXTVAL
                        {% elif col.transform | trim != '' %}
                            {{ col.transform.replace(source.dependencies[0].node.name, 'STR_' + node.name) }}
                        {% elif col.sourceColumns[0].column and col.sourceColumns[0].column.name %}
                            "STR_{{ node.name }}"."{{ col.sourceColumns[0].column.name }}"
                        {% else %}
                            NULL
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    FROM {{ ref_no_link(node.location.name, "STR_" + node.name) }}

                    {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                        {{config.insertStrategy}}
                    {% endif %}

                {% endfor %}

            {% endif %}
        run:
          templateString: ""
    name: CDC Table
    version: 1
  StepType-7:
    id: "7"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: MS Loop Stream
        short: MSLOOP
        plural: MS Loop
        tagColor: 'black'
        config:
        - groupName: Additional Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            isRequired: false
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - displayName: Insert Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            isRequired: true

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        - groupName: Storage Location Query
          items:
          - displayName: Starts With
            attributeName: storageLocationSearchText
            type: textBox
            default: 'SOURCE'
            isRequired: true
            
        systemColumns:
        - displayName: "SOURCE"
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemSource
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                {{ node.override.create.script }}
            {% elif node.materializationType == 'table' %}
                {{ stage('Create Stage Table') }}
                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}
                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: |
            {% if config.truncateBefore %}
                {{ stage('Truncate Stage Table') }}
                TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            {% endif %}
            {% for sourceMapping in storageLocations if sourceMapping.name.startswith(config.storageLocationSearchText) %}
                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ stage( config.insertStrategy + ' Sources' | string ) }}
                            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                        {% endif %}
                        {% for source in sources %}
                            {% if config.insertStrategy == 'INSERT' %}
                                {{ stage('Insert ' +  sourceMapping.name + '_' + source.name | string ) }}
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                            {% endif %}
                            SELECT
                            {% for col in source.columns %}
                                {% if col.isSystemSource %}
                                    '{{ sourceMapping.name }}'
                                {% else %}
                                    {{ "STR_" + sources[0].columns[0].sourceColumns[0].node.name + "." + col.name}}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                            FROM {{ ref(sourceMapping.name, "STR_" + sources[0].columns[0].sourceColumns[0].node.name )}}
                            {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                {{config.insertStrategy}}
                            {% endif %}
                        {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}
            {% endfor %}
    name: Multi Source Loop Stream
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Hub:
    id: Hub
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isHubHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Hub
    version: 1
  StepType-Link:
    id: Link
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Link
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Link Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	
            	{% endif %}

            			
            	{{ stage('Merge Link') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isLinkHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Link
    version: 1
  StepType-Satellite:
    id: Satellite
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            		{% if config.preSQL %}
            			{{ stage('Pre-SQL') }}
            			{{ config.preSQL }}
            		{% endif %}
            	
            		{{ stage('Merge Satellite') }}
            		MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            		(
            			{% for source in sources %}
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if not loop.last %}
            				{{ config.insertStrategy }}
            			{% endif %}
            		{% endfor %}
            		)
            		AS "SRC"
            		ON
            		{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                        and col.sourceColumns[0].column 
                                                        and col.sourceColumns[0].column.isChangeHash
                                                        ) -%}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            		{% endfor %}
            		WHEN NOT MATCHED THEN
            		INSERT
            		(
            			{% for col in columns %}
            				"{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		) VALUES
            		(
            			{% for col in columns %}
            				"SRC"."{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		)
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Satellite
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-1:
    id: "1"
    name: TRUX Union
    steps:
      - 486bdd5d-5c32-4da4-b0c5-46c5c17e2589
      - fbd610e1-dc76-44fd-bd0e-cc0322131758
      - 33967010-d16c-447c-bcb4-0efd9e1e3cb7
      - 618612d6-8f92-4a4d-88d7-bdb7e9b3da79
      - e813396d-1e93-48fc-a1f7-e7e77234a4f2
      - 917a1759-107e-455c-9457-c13984cd20f2
      - 2670588b-f195-40e4-a2d4-d4afc13adedc
      - afae7b73-91b1-47ea-9b28-c7d5c3c0179f
      - 0d22e9bd-111c-4418-9d95-595a5ef95a13
      - 0030487f-0d3e-423f-8e87-8b61d4b59562
      - 3da1f8c7-cd76-48fe-b093-fcb8a2e1dc7b
      - a77aba37-85a6-49b9-b065-5fa6b6116747
      - c2f08946-0eb2-4870-a2cc-479df4650e3f
      - 8ac9fd48-c13c-4512-bec8-c8a38624a3a7
      - c5b24b8f-de90-4a9d-b61d-0d733133c381
      - 315acb48-aa43-4c18-aaa9-8afb8a89ca83
      - 4aabffc3-8a0e-4d0d-bc0e-f018787000fe
      - 0384676d-887a-4c14-b710-38436be61307
      - 1bd1fe5c-4003-406f-88aa-6772ed602a69
      - d8777583-3cba-40a6-bafa-ce55dd25f793
      - 0e8b3780-6ca7-48a0-85ee-501ca3df15c0
      - 70a417db-6f28-4519-a61a-310fb2ea70c7
      - 8f396f88-4a77-40be-b0cf-e66ab68da991
      - 7b0aaf9f-c1dd-45c0-919b-d8a62bcfc5cb
      - 33dbc727-ec78-4982-bc2d-47e193111f72
      - 6c0d49cd-93d5-49d7-b1fb-2858da926ff2
      - 0428b44a-59b6-458f-a138-924ca6d6a19a
      - 3d0f6efa-e300-47b4-b21f-94a61e120d94
      - 2206f478-2759-400b-8fb8-a93912beead3
      - 89901f95-701a-4ee5-8dd3-0850256ebe53
      - 5f265a95-d11b-4d73-9ef7-aed36fd3f6c8
      - 5bc818f2-00bf-4ba2-ac9c-1eac825470fa
      - 5878f5ac-457e-47a5-ac18-00ef3d4e5e63
      - 7cadc368-2cd1-441e-880d-afc25346b441
      - f10b34c5-b4c3-41a8-acc0-0b8bf8df5e63
      - 0030487f-0d3e-423f-8e87-8b61d4b59562
      - 0384676d-887a-4c14-b710-38436be61307
      - 0428b44a-59b6-458f-a138-924ca6d6a19a
      - 0d22e9bd-111c-4418-9d95-595a5ef95a13
      - 0e8b3780-6ca7-48a0-85ee-501ca3df15c0
      - 1bd1fe5c-4003-406f-88aa-6772ed602a69
      - 2206f478-2759-400b-8fb8-a93912beead3
      - 2670588b-f195-40e4-a2d4-d4afc13adedc
      - 315acb48-aa43-4c18-aaa9-8afb8a89ca83
      - 33967010-d16c-447c-bcb4-0efd9e1e3cb7
      - 33dbc727-ec78-4982-bc2d-47e193111f72
      - 3d0f6efa-e300-47b4-b21f-94a61e120d94
      - 3da1f8c7-cd76-48fe-b093-fcb8a2e1dc7b
      - 486bdd5d-5c32-4da4-b0c5-46c5c17e2589
      - 4aabffc3-8a0e-4d0d-bc0e-f018787000fe
      - 5878f5ac-457e-47a5-ac18-00ef3d4e5e63
      - 5bc818f2-00bf-4ba2-ac9c-1eac825470fa
      - 5f265a95-d11b-4d73-9ef7-aed36fd3f6c8
      - 618612d6-8f92-4a4d-88d7-bdb7e9b3da79
      - 6c0d49cd-93d5-49d7-b1fb-2858da926ff2
      - 70a417db-6f28-4519-a61a-310fb2ea70c7
      - 7b0aaf9f-c1dd-45c0-919b-d8a62bcfc5cb
      - 7cadc368-2cd1-441e-880d-afc25346b441
      - 89901f95-701a-4ee5-8dd3-0850256ebe53
      - 8ac9fd48-c13c-4512-bec8-c8a38624a3a7
      - 8f396f88-4a77-40be-b0cf-e66ab68da991
      - 917a1759-107e-455c-9457-c13984cd20f2
      - a77aba37-85a6-49b9-b065-5fa6b6116747
      - afae7b73-91b1-47ea-9b28-c7d5c3c0179f
      - c2f08946-0eb2-4870-a2cc-479df4650e3f
      - c5b24b8f-de90-4a9d-b61d-0d733133c381
      - d8777583-3cba-40a6-bafa-ce55dd25f793
      - e813396d-1e93-48fc-a1f7-e7e77234a4f2
      - f10b34c5-b4c3-41a8-acc0-0b8bf8df5e63
      - fbd610e1-dc76-44fd-bd0e-cc0322131758
  Subgraph-5:
    id: "5"
    name: Combined Stream Subgraph
    steps:
      - 287b0558-49fd-4317-99a5-819ef560f1ba
      - 0d949654-3563-4b8a-88bc-fe94bc806966
      - c2690ddb-feba-4d96-b2bf-ee7d4caac8f0
      - 5138437d-5d9e-4ec2-8f78-659e1d4b9ad2
      - af7d9a71-a790-437a-a79e-4fb3a178059a
      - 905de49f-e576-46b6-a58b-1d1f329b4254
      - d5f1b179-6c29-4d3a-90e5-073d85804f92
      - dd937ff1-00b0-4c58-a601-a7e4f5e12b79
  Subgraph-6:
    id: "6"
    name: Combined Subgraph
    steps:
      - b68e5f03-ae6a-41b7-9ec4-ab1f01b71de4
      - ee2987e6-6a41-4509-8d86-d9e111ec3db9
      - 6dcbae0c-0f82-402e-b01d-c1a60b1c342b
      - 613e8d92-a190-42e3-8e87-25ce2ef23d04
      - 3af16168-6895-403a-9140-2de54d7f90f2
      - c3a185fb-3778-4b9e-8dd6-0500fb0b6e4e
      - 8bd08e5e-64ce-40fc-87c6-f88cb3ed2ca7
      - 7418c001-4ad4-45b4-ae82-debce39600ea
      - 873fa56f-ee8e-469f-908d-af4880f36d65
      - 8fb463a0-8776-43ed-af7d-0b748248749c
      - 71001026-e5b6-431c-99fc-8c83d39aed33
      - 02655129-1956-4b02-af2d-78f83f5b43a3
      - 438b5c12-3ccb-4c0d-bce9-4a236319d37a
      - 498f463a-7395-4cc0-ad5f-d4e7e3d38fcf
      - bd4674f7-935e-485f-8433-a9a843dde723
      - 3131b480-711a-434f-be4a-e6e3315d3c0a
      - f21fe296-8b27-43b1-978c-64999978c610
      - af2cc5f9-03e6-4b06-a245-b0719b2aa432
      - 19bdd241-d0a6-44a1-b49a-02a289a2027f
      - 080d8ab0-3edf-4ee0-b848-dcc7364164df
      - f47180be-fdce-4312-84ff-04027f8092c0
      - f36a5cd1-f2d3-4e7f-b35c-8626d19408ac
      - 73124694-50d3-4d34-8d80-a62967bf4522
      - 83f237e0-2bb1-4230-bef1-d6b54576823f
      - c1a0e120-a9df-4289-8e63-29d19f072eff
      - db00fa1f-6754-41a5-bfcd-7781647256ce
      - 72c275e5-48af-4bff-bc7f-5b0bccfbc514
      - 22703270-d95a-4d24-9226-a6368a5fe258
      - c270cd8b-5710-4b3a-b2fc-dae7c90093ab
      - f2e5d927-cc5f-49f8-ae75-1f93b2376495
      - 76666efd-9dac-4397-99b4-ae7b29fb23f2
      - beb4f5ce-6f22-4f3d-9e7e-ea8c1f1de7c0
      - 60575ce5-d395-4889-95fc-dd8963ddd1d6
      - 2bac113f-bc20-4225-bb45-d6b00ca3130d
      - 6af8f9fb-6519-43d1-baac-72c86dc94c90
      - bbb8b9af-ce4e-46be-8004-032fd4ad599b
      - 6ca99d7d-2c86-4d53-bb86-3203fcf73ae7
      - bfa0fecb-5292-4bb6-8ed4-eb7acf0f9540
      - 75646501-ee23-441a-91c1-fced667296c2
      - 68f75e19-cfe1-40f4-874e-fd866350e4c4
      - 066dbe24-ee57-42f2-84b1-01371ce924b2
      - ce6d3ae9-0c4d-402b-9878-4eae992c1112
      - 7499defb-1b47-4ba7-9e61-f7b006431fe2
      - f738c71e-3b4e-4f2e-bdd9-4b19f187d227
      - 6a1e1a4f-b63a-4137-bd79-329b5809217a
      - bd25ccfd-afa5-4e34-be04-467c3e0970fd
      - 62b09acf-a2e8-4349-89fe-51ac9d2bb961
      - ee847855-7787-4e90-bc2b-f25d4232ef87
      - 9668ada2-a882-42f2-babd-28efe14ce669
      - 82475639-b6b5-4ad7-b9c0-98cffc711fcb
      - 0957e166-ae04-4009-8d30-9868721628af
  Subgraph-7:
    id: "7"
    name: CDC Subgraph
    steps:
      - 0c386ef4-771e-4124-99b9-306e53073a27
      - 1db69c0f-a3b9-47b2-a235-58b1987e4caf
      - 2fc346c8-2445-42d1-b142-81b8dd4be7ec
      - 5f74b843-b8c2-4401-b14c-ef7fec22642e
      - 914f41d0-82b1-446f-aba9-1a619a4f6641
      - aa5aa5ca-542d-4f41-b9b4-586faf1e9c75
      - b28a6edd-c922-4a61-9743-30590373732f
      - bc17df10-2e66-452b-970a-dd817806b034
      - c94fb8e6-89f4-4227-8a05-f0f3ce676f3c
      - e26d9e12-2cb0-4257-ba93-48bbea5491ca
      - f15ec888-e96a-456a-8bd8-b1a124e77585
      - 00895bd5-8322-41a9-b817-dacc21de17fe
      - 091a7bd7-2327-4dad-b013-4432cc15a686
      - 14ee288a-f64a-4819-8357-c7246b7faa16
      - 2133d20e-84e6-42cd-99b2-118ea2961e6d
      - 64304f4d-5d31-4cb9-961b-9bc5f85fe994
      - 6eefb9f9-dd25-4f1a-a0f5-93cf67318856
      - 82d6107a-f7ba-4992-8ed4-4014a3ac17d3
      - 9e89880c-ecff-4771-ad3e-a758c644cbfa
      - 9ec53112-add0-4978-b259-d9ebf6993115
      - cdfc4caa-82d0-4835-a921-2f6710d8ca0e
      - d1815df5-09fb-48c6-813f-a76c19a76832
      - 13e259e3-9546-41b1-9a94-e5829bee811f
      - 1a0eb25f-b236-4791-8a5a-dcef6d60f581
      - 617355dd-c9cb-433d-b550-a3a0256d84ff
      - 6773e69b-7970-41b3-b7a5-72a53bebbd3b
      - a2b0364e-f816-416f-8c52-77b31d435cfb
      - b9fd47f7-f43e-4ca7-8fd7-290d93334335
      - bbc43bf5-1367-4f63-a024-dfa62162fdd1
      - cdbab034-d5fb-4cee-b65e-130cf40cfff4
      - d36b19c6-e61c-4dfe-a5db-5bf1db3c920b
      - e70e3914-748a-4895-bd62-6b3947b1951b
      - e965a928-dccf-4347-9bad-0d0dc8175199
      - 098bd86d-1149-44f2-acdf-a60dab0299b5
      - 0e991d20-07a0-4959-843e-81164a6b7e48
      - 0fe2c9e3-627e-4089-a404-63dcb7bad9b5
      - 1131a0b3-d2eb-4028-9123-80d988671e5c
      - 116e2b2b-00d7-4417-83a1-4c9f5e43558f
      - 1aa7a1dc-030b-449d-8ef4-a8f22113a54e
      - 2594e8e1-fb35-4dbb-a8d8-755bfdc6172e
      - 26e54c43-43ee-4303-a45c-135e1cf5d377
      - 2900ed20-f7d8-49b5-ab83-0764b9a923ed
      - 2fcc3944-c770-45cf-8278-ac51838f7af2
      - 385c25d7-e762-46e4-a52d-a1ae01d820f1
      - 43cab8bf-b9c6-4207-b3ac-ac429518e978
      - 5bb2368f-63a3-41fc-8b10-f6cb34fa9ed1
      - 5ec949e7-c3f7-46df-a4d8-e0e847ad9f3f
      - 6b099757-5fc3-4e17-abbb-53fd9aeac3f4
      - 6db2703b-4b18-47e4-9341-7a60764a44d2
      - 7386c5d8-e6b9-4d74-8fe3-d8bacf2425f3
      - 7e37d185-0fbc-4db6-8e98-8c51cf56b263
      - 85978cd2-5bca-49df-bad3-980bf16fe52f
      - 86aeae19-6439-40c1-a619-6939d17af116
      - 8fc96a6c-ba44-405e-9d4f-b6f1c398ddc4
      - a33af5b4-484d-4032-9b88-45bcc28822d9
      - a58c24b7-3476-4005-bf91-1b77356e7262
      - a6354f99-b13e-492b-85a4-fc5300fbe498
      - a9c7f62c-3128-44ea-bc67-f75452299278
      - aed3536f-acb3-41ab-9e42-f0b419511d5c
      - b172e32c-8c54-48b2-8035-26ebc9c3cebb
      - b4f0535b-711d-4dd6-9e27-562b3f2aed2a
      - b81d9829-459f-45ce-a952-942f339c3253
      - c66ed70a-bba8-40a3-863c-ae5bd71eb2c0
      - d1922e6b-7402-49f0-87c9-154c0adc0bce
      - da289543-be74-405e-832d-6caf50e9f748
      - dad790f6-7506-4859-9a8c-315313f208b4
      - ee51f4c0-a61b-4c85-9c0b-bea1b74c1b08
      - eec1d56b-0a02-4db5-b0fc-a1b256923073
      - f95e460f-fa18-453b-9fbc-297a0f8e46b9
      - 039cc226-b900-456c-816a-06ae05f85584
      - 09d97d12-6c24-434b-bb5f-1ae56d19344b
      - 0ef4c03c-cd24-43b4-8304-d7d983c839c9
      - 10c51669-d6d8-4512-bd9e-234feaca4e45
      - 1cc72245-921f-4d2d-a594-1cae9a4305c9
      - 26a7a49c-50a9-4353-a191-0a05b0814fac
      - 335e7f2b-8d6a-4905-a7c8-976d56cc9bb0
      - 353f19b7-9128-4067-963e-3bb2a7c6faf1
      - 397350b1-fd44-49f8-9860-4266dce218ff
      - 3d70c3b4-9324-4bd1-b69a-40162b8f26b9
      - 4cefb07f-ea3d-470b-8978-a64eda46dbd5
      - 57280629-9a43-4363-bedf-d95ab59be70e
      - 64346c28-0cc2-488a-86a1-d482249477f8
      - 6a9e7530-47f7-4ab0-b703-d0898f4c2287
      - 6b544f40-87ad-4f7c-986c-0ff0559af172
      - 6ca9ac2d-59a3-4f07-a862-71b54c85d5b1
      - 874138b5-3641-4ccb-bca3-4bde094b4840
      - a6aaf1aa-26fc-4051-9653-9b4b979be91e
      - a78954dd-2eb6-4379-9774-98e675a6fd61
      - abc8f8aa-f37d-4e90-8d37-ab115667a571
      - b23a462e-2d01-436c-adfb-528787bb9616
      - b9356ba3-8b39-4e42-8e1a-09c860f194a1
      - bf0f8eb4-ae6a-49f5-ba42-7c5126a5df66
      - cb0f6cf9-9603-4947-a01f-a4ad3964b47b
      - d4768c76-e61d-40d2-a990-03caf798c39c
      - d7c7d3da-5f61-4dce-8cdc-24b77a10bdc7
      - d7eb615a-6a5c-4fa5-b090-13405c6a0551
      - d98fefe1-658b-4d3f-9b67-d306ff9f62a9
      - dc637ed7-39e8-4a8f-9509-e546ed8acd31
      - dfa9c336-16d4-4de1-8fc8-8586c43a621e
      - e1307296-ba42-4e57-9d2e-28eb9a91357d
      - e7694897-5caa-4296-8c6e-832314146648
      - e8215d7a-901e-4f77-bfa2-71cca9b23899
      - f05d656d-9ee2-43e1-8212-61b1d1a2ed5b
      - f1e25ec9-023f-445b-9906-99ba1b730d3b
      - ff14501e-d344-4b32-a3e9-aa2ea532a279
      - 1a9e9e8b-9e6f-4fa2-acaf-42ae1dc983e0
      - 22763ded-485c-492d-8571-bcb508fbfcb3
      - 2fcf8a17-d3f9-4e69-8c88-71b76c7b9bc0
      - 48ec8f22-daa7-4b10-a04b-675fbf2ffee2
      - 63be018d-a792-4174-bf1c-24f97cce669c
      - 848bbe28-5538-48aa-bea5-c4a7c527cec2
      - a05ffed3-d6d8-40fb-8a8a-bb26306e1580
      - a613abfe-7a8e-4504-8e64-fd91ee35e776
      - d669e40e-3840-4780-8780-c6bc70ec2334
      - e411cd4b-4899-411e-89e7-3e971aa6697e
      - f57f010d-e542-4f3a-ab40-d63d88698564
      - 15bb5b11-a6de-41aa-beca-9ea0d60c4e06
      - 1ce0f620-039b-4d4d-b1a5-3a6905e16b0d
      - 1e583027-314c-4788-ba99-e36b8b6064d8
      - 5e458247-185b-4b46-9288-94be274ebecb
      - 6aef639b-d2b4-4ca2-8985-4dbccd44e8b9
      - 88ba2427-ac7d-44bc-a325-e4d56b9d7248
      - 9152be75-aa55-4787-9e5f-540f2caadf89
      - 99f85ece-e8cd-479d-b6f2-c404f9baaef4
      - afacf149-50e5-4552-95ee-f25d5f6f30a6
      - e2f91b05-ecf2-4fa7-9b36-2237635bdcb6
      - fe02c488-ed32-4793-a361-48a399e7afee
      - 04ad6c35-9e45-476d-9984-62548ebf954e
      - 3d0696e4-7cb7-4916-b3ce-14f7217c4a4f
      - 4000bbfd-3d7a-485e-b01e-d7fc8b25d51f
      - 74ddd619-8cb2-4ce0-8f14-8bdfa33d939f
      - 7d8e981b-9f96-4d37-bb03-5cabd9bba942
      - a1f7337e-fd47-4bd9-be53-aef9a992b2a5
      - a5a3bb1e-bcba-4c79-9cc3-1a1470a32dd4
      - b44f9ee9-1023-46a6-8e63-c99617908c7b
      - dec912c8-a7c0-4a7c-a326-3ea311f01f3f
      - ec79482d-b290-466c-89e4-dbc9cc163db4
      - fee2d1ac-1d59-4c2a-b21d-3ed2414fbb73
      - 048c1844-0aaa-47ba-81e9-b5d5ae0d5542
      - 2ff0e0bc-3606-4aab-ab12-d512f422966e
      - 94c617ec-7934-45ed-98e7-302de8eb5f00
      - d4f2c014-ef4a-4258-ae25-cd8d724ed58e
      - fcbb3eb1-26f0-4fcf-a6ca-b654e506e0ed
      - 59fc5646-e23d-48fc-bc6a-ffe24b5e2438
version: 2
